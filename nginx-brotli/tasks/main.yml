---
- name: Ensure apt cache is updated
  ansible.builtin.apt:
    update_cache: true

- name: Install required packages for adding repositories
  ansible.builtin.apt:
    name:
      - curl
      - gnupg2
      - ca-certificates
      - lsb-release
      - debian-archive-keyring
    state: present

- name: Install sudo
  ansible.builtin.apt:
    name: sudo
    state: present

- name: Import the official NGINX signing key
  ansible.builtin.get_url:
    url: https://nginx.org/keys/nginx_signing.key
    dest: /tmp/nginx_signing.key
    mode: '0644'

- name: Check if GPG key conversion is needed
  ansible.builtin.stat:
    path: /usr/share/keyrings/nginx-archive-keyring.gpg
  register: gpg_key_stat

- name: Convert the signing key to GPG format
  ansible.builtin.command:
    cmd: gpg --batch --dearmor /tmp/nginx_signing.key
  register: gpg_conversion
  ignore_errors: true
  changed_when: "false"

- name: Move GPG key to the correct location
  ansible.builtin.command:
    cmd: mv /tmp/nginx_signing.key.gpg /usr/share/keyrings/nginx-archive-keyring.gpg
  register: move_result
  changed_when: "false"

- name: Confirm key move was successful
  ansible.builtin.debug:
    msg: "GPG key moved successfully!"
  when: move_result is defined and 'rc' in move_result and move_result.rc == 0

- name: Verify the NGINX signing key
  ansible.builtin.command:
    cmd: gpg --dry-run --quiet --no-keyring --import --import-options import-show /usr/share/keyrings/nginx-archive-keyring.gpg
  register: key_verification
  changed_when: "false"

- name: Set NGINX version variable
  ansible.builtin.set_fact:
    nginx_repo_url: "https://nginx.org/packages/{{ 'mainline' if nginx_mainline_version else 'nginx' }}/{{ ansible_distribution | lower }}"
    nginx_repo_distribution: "{{ ansible_distribution_release }}"

- name: Add NGINX repository
  ansible.builtin.apt_repository:
    repo: "deb [signed-by=/usr/share/keyrings/nginx-archive-keyring.gpg] {{ nginx_repo_url }} {{ nginx_repo_distribution }} nginx"
    filename: "nginx"

- name: Update apt cache
  ansible.builtin.apt:
    update_cache: true

- name: Set up repository pinning for NGINX
  ansible.builtin.copy:
    content: |
      Package: *
      Pin: origin nginx.org
      Pin: release o=nginx
      Pin-Priority: 900
    dest: /etc/apt/preferences.d/99nginx
    mode: '0644'

- name: Install required packages for NGINX and Brotli
  ansible.builtin.apt:
    name:
      - cmake
      - git
      - build-essential
      - zlib1g
      - zlib1g-dev
      - openssl
      - libssl-dev
      - nginx
      - libbrotli1
      - libbrotli-dev
    state: present
    update_cache: true

- name: Ensure SELinux settings for nginx reverse proxying
  ansible.builtin.seboolean:
    name: httpd_can_network_connect
    state: yes
    persistent: yes
  when: ansible_selinux is defined and ansible_selinux.status == "enabled"

- name: Get installed NGINX version
  ansible.builtin.command:
    cmd: nginx -v
  register: nginx_version
  ignore_errors: true
  changed_when: "false"

- name: Extract NGINX version number
  ansible.builtin.set_fact:
    ngver: "{{ nginx_version.stderr | regex_search('nginx/([0-9.]+)', '\\1') | first }}"
  when: nginx_version is defined and nginx_version.stderr is defined

- name: Create temporary build directory
  ansible.builtin.tempfile:
    state: directory
  register: builddir

- name: Download NGINX source
  ansible.builtin.get_url:
    url: "https://nginx.org/download/nginx-{{ ngver }}.tar.gz"
    dest: "{{ builddir.path }}/nginx-{{ ngver }}.tar.gz"
    mode: '0644'
  when: ngver is defined and ngver | length > 0

- name: Set permissions for downloaded NGINX source file
  ansible.builtin.file:
    path: "{{ builddir.path }}/nginx-{{ ngver }}.tar.gz"
    mode: '0644'
  when: ngver is defined and ngver | length > 0

- name: Extract NGINX source
  ansible.builtin.unarchive:
    src: "{{ builddir.path }}/nginx-{{ ngver }}.tar.gz"
    dest: "{{ builddir.path }}"
    remote_src: true
  when: ngver is defined and ngver | length > 0

- name: Clone and update ngx_brotli repository
  ansible.builtin.git:
    repo: "https://github.com/google/ngx_brotli.git"
    dest: "{{ builddir.path }}/ngx_brotli"
    recursive: true
    update: true
    force: true
    version: master
  register: brotli_repo

- name: Clone nginx_cookie_flag_module repository
  ansible.builtin.git:
    repo: "https://github.com/AirisX/nginx_cookie_flag_module.git"
    dest: "{{ builddir.path }}/nginx_cookie_flag_module"
    update: true
    force: true
    version: master

- name: Clone ngx-fancyindex repository
  ansible.builtin.git:
    repo: "https://github.com/aperezdc/ngx-fancyindex.git"
    dest: "{{ builddir.path }}/ngx-fancyindex"
    update: true
    force: true
    version: master

- name: Clone headers-more-nginx-module repository
  ansible.builtin.git:
    repo: "https://github.com/openresty/headers-more-nginx-module.git"
    dest: "{{ builddir.path }}/headers-more-nginx-module"
    update: true
    force: true
    version: master

- name: Get latest PCRE2 release
  ansible.builtin.uri:
    url: "https://api.github.com/repos/PCRE2Project/pcre2/releases/latest"
    method: GET
    return_content: true
  register: pcre2_release

- name: Set PCRE2 version and download URL
  ansible.builtin.set_fact:
    pcre2_version: "{{ pcre2_release.json.tag_name }}"
    pcre2_download_url: "{{ pcre2_release.json.assets | selectattr('name', 'search', '.tar.gz$') | map(attribute='browser_download_url') | first }}"

- name: Create temporary build directory for PCRE2
  ansible.builtin.tempfile:
    state: directory
  register: pcre2_builddir

- name: Download PCRE2 source code
  ansible.builtin.get_url:
    url: "{{ pcre2_download_url }}"
    dest: "{{ pcre2_builddir.path }}/{{ pcre2_version }}.tar.gz"
    mode: '0644'
  when: pcre2_download_url is defined

- name: Extract PCRE2 source code
  ansible.builtin.unarchive:
    src: "{{ pcre2_builddir.path }}/{{ pcre2_version }}.tar.gz"
    dest: "{{ pcre2_builddir.path }}"
    remote_src: true

- name: Compile and install PCRE2
  ansible.builtin.command:
    cmd: ./configure --prefix=/usr/local
  args:
    chdir: "{{ pcre2_builddir.path }}/{{ pcre2_version }}"
  changed_when: "false"

- name: Make PCRE2
  ansible.builtin.command:
    cmd: make
  args:
    chdir: "{{ pcre2_builddir.path }}/{{ pcre2_version }}"
  changed_when: "false"

- name: Install PCRE2
  ansible.builtin.command:
    cmd: make install
  args:
    chdir: "{{ pcre2_builddir.path }}/{{ pcre2_version }}"
  changed_when: "false"

- name: Set extra modules based on nginx_remove_mail_module and nginx_remove_stream_modules
  ansible.builtin.set_fact:
    extra_modules: |
      {%- set modules = [] -%}
      {%- if nginx_remove_mail_modules is not true -%}
      {%- set _ = modules.append('--with-mail') -%}
      {%- set _ = modules.append('--with-mail_ssl_module') -%}
      {%- endif -%}
      {%- if nginx_remove_stream_modules is not true -%}
      {%- set _ = modules.append('--with-stream') -%}
      {%- set _ = modules.append('--with-stream_realip_module') -%}
      {%- set _ = modules.append('--with-stream_ssl_module') -%}
      {%- endif -%}
      {{ modules | join(' ') }}


- name: Configure NGINX with all specified modules
  ansible.builtin.command: >
    ./configure
    --prefix=/etc/nginx
    --sbin-path=/usr/sbin/nginx
    --modules-path=/usr/lib/nginx/modules
    --conf-path=/etc/nginx/nginx.conf
    --error-log-path=/var/log/nginx/error.log
    --http-log-path=/var/log/nginx/access.log
    --pid-path=/var/run/nginx.pid
    --lock-path=/var/run/nginx.lock
    --http-client-body-temp-path=/var/cache/nginx/client_temp
    --http-proxy-temp-path=/var/cache/nginx/proxy_temp
    --http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp
    --http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp
    --http-scgi-temp-path=/var/cache/nginx/scgi_temp
    --user=nginx
    --group=nginx
    --with-compat
    --with-file-aio
    --with-threads
    --with-http_addition_module
    --with-http_auth_request_module
    --with-http_dav_module
    --with-http_flv_module
    --with-http_gunzip_module
    --with-http_gzip_static_module
    --with-http_mp4_module
    --with-http_random_index_module
    --with-http_realip_module
    --with-http_secure_link_module
    --with-http_slice_module
    --with-http_ssl_module
    --with-http_stub_status_module
    --with-http_sub_module
    --with-http_v2_module
    --with-http_v3_module
    {{ extra_modules | trim }}
    --with-pcre="{{ pcre2_builddir.path }}/{{ pcre2_version }}"
    --add-dynamic-module={{ builddir.path }}/ngx_brotli
    --add-dynamic-module={{ builddir.path }}/nginx_cookie_flag_module
    --add-dynamic-module={{ builddir.path }}/ngx-fancyindex
    --add-dynamic-module={{ builddir.path }}/headers-more-nginx-module
#    --add-dynamic-module={{ builddir.path }}/nginx-module-vts
  args:
    chdir: "{{ builddir.path }}/nginx-{{ ngver }}"
  register: configure_output
  # noinspection YAMLIncompatibleTypes
  changed_when: "'configuration complete' in configure_output.stdout"  # Correct usage

- name: Check if NGINX is already installed
  ansible.builtin.stat:
    path: /usr/sbin/nginx

- name: Make NGINX
  ansible.builtin.command:
    cmd: make
    chdir: "{{ builddir.path }}/nginx-{{ ngver }}"
  register: make_output
  changed_when: "'Make finished successfully' in make_output.stdout"

- name: Install NGINX
  ansible.builtin.command:
    cmd: make install
    chdir: "{{ builddir.path }}/nginx-{{ ngver }}"
  register: install_output
  changed_when: "'Install finished successfully' in install_output.stdout"

- name: Find compiled module files
  ansible.builtin.find:
    paths: "{{ builddir.path }}/nginx-{{ ngver }}/objs/"
    patterns: "*.so"
  register: so_files

- name: Move compiled modules to the modules directory
  ansible.builtin.copy:
    remote_src: true
    src: "{{ item.path }}"
    dest: "/usr/lib/nginx/modules/{{ item.path | basename }}"
    mode: preserve
  loop: "{{ so_files.files }}"
  when: ngver is defined and ngver | length > 0

- name: Create customized nginx.conf with pre settings
  ansible.builtin.template:
    src: default_nginx_conf.j2
    dest: /etc/nginx/nginx.conf
    owner: root
    group: root
    mode: '0644'

- name: Create cloudflare ip list
  ansible.builtin.template:
    src: cloudflare_ip.conf.j2
    dest: /etc/nginx/cloudflare.conf
    owner: root
    group: root
    mode: '0644'

- name: Ensure /var/www/html directory exists
  ansible.builtin.file:
    path: /var/www/html
    state: directory
    mode: '0755'
    owner: www-data
    group: www-data
    recurse: true

- name: Remove build dependencies
  ansible.builtin.apt:
    name:
      - cmake
      - zlib1g-dev
      - build-essential
    state: absent
  failed_when: false

- name: Remove default symbolic link
  ansible.builtin.file:
    path: /etc/nginx/sites-enabled/default
    state: absent
  failed_when: false

- name: Remove the sites-enabled directory, use /etc/nginx/conf.d instead
  ansible.builtin.file:
    path: /etc/nginx/sites-enabled
    state: absent

- name: Remove the sites-available directory, use /etc/nginx/conf.d instead
  ansible.builtin.file:
    path: /etc/nginx/sites-available
    state: absent

- name: Cleanup temporary build directories
  ansible.builtin.file:
    path: "{{ item }}"
    state: absent
  loop:
    - "{{ builddir.path }}"
    - "{{ pcre2_builddir.path }}"

- name: Create Nginx config for domains with SSL settings
  ansible.builtin.template:
    src: nginx_default_server_conf.j2
    dest: "/etc/nginx/conf.d/{{ domain }}.conf"
    owner: root
    group: root
    mode: '0644'
  loop: "{{ domains if generate_domain_configs else ['example.com'] }}"
  loop_control:
    loop_var: domain
