# tasks/main.yml
- name: ensure prequisites are installed
  ansible.builtin.package:
    name:
      - git
      - openssl
      - curl
    state: present
    update_cache: true

- name: Klone acme.sh Repository
  ansible.builtin.git:
    repo: 'https://github.com/acmesh-official/acme.sh.git'
    dest: '~/myacme'
    depth: 1
    update: true
    clone: true
    version: master

- name: Installiere acme.sh
  ansible.builtin.command: >
    ./acme.sh --install
    --home {{ acme_sh_path }}
    --config-home {{ acme_sh_path }}/data
    --cert-home /etc/ssl/certs
  args:
    chdir: '~/myacme'
    creates: "{{ acme_sh_path }}/acme.sh"

- name: Entferne myacme Ordner nach Installation
  ansible.builtin.file:
    path: '~/myacme'
    state: absent



- name: Ensure acme.sh environment variables and alias are set for bash, zsh, and create acme.sh environment file
  block:
    - name: Ensure the Oh My Zsh custom directory exists
      ansible.builtin.file:
        path: /usr/share/oh-my-zsh/custom
        state: directory
        owner: root
        group: root
        mode: '0755'
      when: install_oh_my_zsh | default(false)

    - name: Ensure acme.sh environment variables and alias are set for bash, zsh, and create acme.sh environment file
      ansible.builtin.copy:
        dest: /etc/profile.d/acme.sh
        content: |
          export LE_WORKING_DIR="{{ acme_sh_path }}"
          alias acme.sh="{{ acme_sh_path }}/acme.sh"
        owner: root
        group: root
        mode: '0644'
      loop:
        - /usr/share/oh-my-zsh/custom/acme.zsh
        - /etc/profile.d/acme.sh
        - "{{ acme_sh_path }}/acme.sh.env"
      loop_control:
        label: "{{ item }}"


- name: Configure Cloudflare API credentials
  ansible.builtin.copy:
    dest: "{{ acme_sh_path }}/cloudflare.conf"
    content: |
      export CF_Token="{{ cloudflare_api_key }}"
    mode: '0600'

- name: Register ACME account with ZeroSSL
  ansible.builtin.command: >
    {{ acme_sh_path }}/acme.sh --register-account -m {{ account_email }}
  environment:
    LE_WORKING_DIR: "{{ acme_sh_path }}"
  changed_when: false

- name: Set ACME staging variable
  ansible.builtin.set_fact:
    acme_staging_flag: "{{ '--staging' if acme_sh_dry_run | default(false) else '' }}"

- name: Issue ACME certificates using acme.sh
  ansible.builtin.shell: |
    . {{ acme_sh_path }}/acme.sh.env && \
    {{ acme_sh_path }}/acme.sh --issue {{ acme_staging_flag }} --dns dns_cf \
    -d {{ item }} \
    {% if wildcard %} -d '*.'{{ item }} {% endif %} \
    {% if acme_sh_force_renewal | default(false) %} --force {% endif %}
  environment:
    CF_Token: "{{ cloudflare_api_key }}"
  loop: "{{ acme_domains }}"
  loop_control:
    label: "{{ item }}"
  changed_when: false

- name: Install ACME certificates
  ansible.builtin.shell: |
    . {{ acme_sh_path }}/acme.sh.env &&
    {{ acme_sh_path }}/acme.sh --install-cert --debug -d {{ item }} \
      --key-file {{ cert_path }}/{{ item }}.key \
      --fullchain-file {{ cert_path }}/{{ item }}.crt
  register: install_cert
  loop: "{{ acme_domains }}"
  loop_control:
    label: "{{ item }}"
  changed_when: false

- name: Ensure permissions for certificate files
  ansible.builtin.file:
    path: "{{ cert_path }}/{{ item }}.crt"
    mode: '0644'
  loop: "{{ acme_domains }}"
  loop_control:
    label: "{{ item }}"

- name: Ensure permissions for key files
  ansible.builtin.file:
    path: "{{ cert_path }}/{{ item }}.key"
    mode: '0644'
  loop: "{{ acme_domains }}"
  loop_control:
    label: "{{ item }}"

- name: Generate Diffie-Hellman Parameters
  community.crypto.openssl_dhparam:
    path: "{{ cert_path }}/dhparam.pem"
    size: 4096
  changed_when: false

- name: Test NGINX configuration
  ansible.builtin.command: nginx -t
  register: nginx_test
  ignore_errors: yes

- name: Restart NGINX to apply changes
  ansible.builtin.service:
    name: nginx
    state: restarted
  when: "'successful' in nginx_test.stdout"